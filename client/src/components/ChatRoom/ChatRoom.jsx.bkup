import React, { useEffect, useContext, useState, Fragment, useRef } from 'react';
import { Redirect, useParams } from 'react-router-dom'
import socketIoClient from 'socket.io-client'
import { CurrentUserContext } from '../../contexts/CurrentUserProvider.jsx'
import { PeerStreamContext } from '../../contexts/PeerStreamProvider.jsx'
// import axios from 'axios'
import Peer from 'peerjs'

const SOCKET_IO_SERVER = 'http://localhost:3000'
const PEER_SERVER = "localhost"

const socket = socketIoClient(SOCKET_IO_SERVER)

const ChatRoom = () => {
    const [currentUser] = useContext(CurrentUserContext)
    const createdByRef = useRef()
    const urlParams = useParams()
    const roomID = urlParams.roomID
    const [myPeerID, setMyPeerID] = useState(undefined)
    const [liveStream, setLiveStream] = useState(undefined)
    const joinedRoomRef = useRef()


    const peerObject = new Peer(undefined, {
        host: PEER_SERVER,
        port: "3001"
    })

    console.log("RENDERING CHAT ROOM")

    useEffect(() => {
        console.log("CONPONENT DID MOUNT!")
        if (currentUser) {
            if (currentUser.instructor) {
                getMediaFromBrowser().then(() => {
                    console.log(liveStream)
                })
            }

            peerObject.on("open", (peerID) => {
                console.log("Peer Connection established. ID: ", peerID)
                setMyPeerID(peerID)
            })
        }
    }, [])

    peerObject.on('call', call => {
        console.log("Received a call from", call.metadata.callerID)

        call.on("stream", otherPeerStream => {
            console.log("Received stream", otherPeerStream)
            setLiveStream(otherPeerStream)
        })
    })

    if (myPeerID && !joinedRoomRef.current) {
        console.log("Joining Room", roomID)
        socket.emit("join-room", myPeerID, roomID)

        socket.on("new-user-joined", userID => {
            console.log("[new-user-joined] ID: ", userID)

            if (currentUser.instructor && liveStream) {
                // Call that new user and send the stream
                console.log("Calling peer", userID, " with stream", liveStream)
                peerObject.call(userID, liveStream, {
                    metadata: {
                        callerID: myPeerID
                    }
                })
            }
        })
    }

    const getMediaFromBrowser = async () => {
        let stream = await navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        })
        // console.log(stream)
        setLiveStream(stream)
    }

    if (!currentUser) {
        return <Redirect to="/login" />
    }
    return (
        <Fragment>
            <h1 className="room-created-by" ref={createdByRef}> </h1>
            <h3 className="current-user">{currentUser.username}</h3>
            <div className='streams-container' style={{ minHeight: '100vh', display: 'flex', flexWrap: 'wrap' }}>
                <VideoStream key={myPeerID} id={myPeerID} stream={liveStream} />
            </div>
        </Fragment>
    );
}

const VideoStream = (props) => {
    const videoRef = useRef()
    console.log("Rendeting VideoStream")

    useEffect(() => {
        if (typeof (props.stream) !== "number") {
            videoRef.current.srcObject = props.stream
        }
    }, [props.stream])

    return (
        <div style={{ position: 'relative' }}>
            <p style={{
                position: 'absolute', top: 30, left: 30, zIndex: 1000, color: 'white'
            }}>{props.id}</p>
            <video
                style={VideoStreamStyles}
                autoPlay
                muted
                ref={videoRef}
                className="video-stream"
            ></video>
        </div>
    )
}

const VideoStreamStyles = {
    width: 480,
    height: 360,
    margin: 10,
    border: '2px solid lime',
    transform: 'rotateY(180deg)'
    // color: 'white',
    // display: 'grid',
    // placeItems: 'center',
    // fontSize: 25,
    // backgroundColor: 'black',
}

export default ChatRoom;